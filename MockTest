# **JavaScript 50Q Interview Readiness**

üìå **Submission Guidelines**

1. Solve **all questions** in a separate file/folder.
   - File name: `JS_Assessment_<YourName>.js`
   - If multiple files, zip and name it: `JS_Assessment_<YourName>.zip`
2. For **output-based questions**:
   - Write the code.
   - Add a comment above with your **predicted output**.
   - Example:
     ```jsx
     // Q1: Output ‚Üí 10, 10, 10
     const a = 10;
     const b = a;
     console.log(a, b);
     ```
3. For **theory questions** (DOM, BOM, Promises, etc.):
   - Write your answer as a comment in the file.
   - Example:
     ```jsx
     // Q21: Difference between innerHTML and textContent?
     // innerHTML ‚Üí parses and renders HTML
     // textContent ‚Üí returns only the text without parsing HTML
     ```
4. Duration: 40 Mins.
5. **Late submissions** may not be considered, so plan your time well.
6. **During Mock Interviews**:

- Keep your `JS_Assessment` file ready.

---

1. What will be the output?

```jsx
console.log(typeof null);
console.log(typeof undefined);

// object
// object
```

1. Predict the result:

```jsx
console.log(5 > 2 ? "Yes" : "No");
console.log(2 > 5 ? "Yes" : "No");

// Yes
// No
```

1. What is the difference between `==` and `===`? Give one example.
<!--
    #  ==
1. == and === basically they are comparison operator
1. == it is a loosely equallity test , basically it's only compare the value both are same or not

# ===

1. === it is check the value as well as datatype of value of value both are equal or not
   -->

2. Predict:

```jsx
console.log(10 + "20");
console.log("10" - 5);

// 1020
// 5
```

1. What is the output?

```jsx
let a = true;
let b = false;
console.log(a + b);
console.log(a * b);
// 1
// 1
```

1. What is the difference between `var`, `let`, and `const`?
<!-- 
var,let,const are the declarator of JavaScript

var
The var it is old declarator of JavaScript
The var is global Scope of variable
The value are reasign or redeclare
The var are support the Hoisting

let
The let are introduce ES6 feature
The let are Block Scope of variable of JavaScript
The let are reasign but not redeclare
The let are also used for Hoisting But it gives Temporary Death Zone

const
The const are introduce ES6 feature
The const are Block Scope declarator
The const are constant value , we can't change it
The const basically used for unique identification like password,accNo,etc
The const are also used for Hoisting But it gives Temporary Death Zone
--> 2. Find the error:

```jsx
const num;
num = 10;
// variable declared with const keyword in javaScript must be initialized at the time of declaration. The cannot be declared without an intial value .
```

1. Write a program to sort the given array using a method

   [10,20,50,80,100,‚Äù Y‚Äù,‚Äù C‚Äù,‚Äù B‚Äù, 200,30,100];

<!--
<script>
let  arr=[10,20,50,80,100,‚Äù Y‚Äù,‚Äù C‚Äù,‚Äù B‚Äù, 200,30,100];
arr.sort();
</scirpt>
-->

1. Predict:

```jsx
console.log(1 < 2 < 3);
console.log(3 > 2 > 1);

// True
// True
```

1. Output?

```jsx
console.log(null + 1);
console.log(undefined + 1);

// 1
// 1
```

---

## üîπ Functions & Scope

1. Function vs Arrow function ‚Äî write one example of each.
<!-- 
Function 
Function is reusable block of code .That can used for when user want one code many time the the used of function 

    ex:-
    <script>
    function a{
    console.log("Hello World");
    }
    a();

Arrow Function it is simple syntax of Function that represent a function

    exa:-

<script>
const add = (a, b) => a + b;
</script>

--> 2. Predict:

```jsx
function add(x, y = 5) {
  return x + y;
}
console.log(add(10));

// 15
```

1. What will happen?

```jsx
console.log(a);
var a = 10;
// 10
```

1. What will happen?

```jsx
console.log(b);
let b = 20;
// undefined
```

1. Write a function to check whether a number is even or odd.

<script>
    function evenodd{
    if(2%0===0){
      console.log("odd");
    }
    else
    {
      console.log("even");
    }
    
    }
    evenodd();
2. Difference between `return` and `console.log`.

return
The return is gives the return value and its terminate the code. at the time

console.log
The console.log are used to represent the output in the console.
3. Predict:

```jsx
function test(){
   var x = 10;
   if(true){
      var x = 20;
      console.log(x);
   }
   console.log(x);
}
test();

```
// 20
// 20

1. Output?

```jsx
(function(){
  console.log("IIFE executed!");
})();
```
// IIFE executed!

1. What is closure? Show with a small code example.
// closure is created when fucntion remember itts lexical scope 


fuction outer(){
  let count=0;
  funciton inner(){
    count++;
    console.log(count);
  }
  return;
}

counter= count.outer();

2. Difference between function declaration and function expression.

A function declared with the function keyword and a name.
Ex-
function a() {
  return "Hello!";
}
console.log(a()); // Hello!


2. Function Expression
A function assigned to a variable.
Ex-
const a = function() {
  return "Hello!";
};
console.log(a()); // Hello!


## üîπ Arrays & Strings

1. Predict:

```jsx
let arr = [1,2,3,4];
arr.push(5);
console.log(arr);

```
// 1,2,3,4,5

1. Predict:

```jsx
let arr = [1,2,3];
arr.pop();
console.log(arr);
```
//1,2

1. Predict:

```jsx
let arr = [1,2,3];
arr.shift();
console.log(arr);

```
//2,3

1. Predict:

```jsx
let arr = [1,2,3];
arr.unshift(0);
console.log(arr);

```
//0,1,2,3

1. Difference between `slice` and `splice` with an example.
// slice ‚Üí its copy portion 
// splice ‚Üí its remove/replace


2. Predict:

```jsx
let arr = [10,20,30,40];
console.log(arr.slice(1,3));

```
// [20,30]

1. Predict:

```jsx
let arr = [10,20,30,40];
arr.splice(1,2,"X","Y");
console.log(arr);

```
// [10,"X","Y",40]

1. Predict:

```jsx
let str = "Hello World";
console.log(str.split(" "));

```
// ["Hello","World"]

1. Predict:

```jsx
let str = "JavaScript";
console.log(str.charAt(4));
console.log(str[4]);
```
// s
// s

1. Write a code to reverse a string.

// let str3 = "hello";
// console.log(str3.split("").reverse().join(""));
---

## üîπ DOM & BOM

1. How to select an element by `id`, `class`, and `tag` in DOM?
// id ‚Üí document.getElementById("id")
// class ‚Üí document.getElementsByClassName("cls")
// tag ‚Üí document.getElementsByTagName("tag")

2. Difference between `innerHTML` and `textContent`.
// innerHTML parses HTML
//Returns all HTML content inside an element
// let div = document.querySelector("div");
// div.innerHTML = "<b>Hello</b> World";
// console.log(div.innerHTML);

// textContent returns text only
// Returns only the text inside the element
// let div = document.querySelector("div");
// div.textContent = "<b>Hello</b> World";
// console.log(div.textContent); 


3. Predict:

```html
<p id="demo">Hello</p>
<script>
document.getElementById("demo").innerText = "Hi!";
</script>
<!-- // p text changes to "Hi!" -->

````

What will display in the browser?

1. What is the difference between `window` and `document` objects in BOM/DOM?

// window ‚Üí global browser object
// document ‚Üí webpage structure


2. How to change the background color of the page using JS?

// document.body.style.backgroundColor = "red";
---

## üîπ Timers & Modern JS

1. Predict:

```jsx
setTimeout(() => console.log("Hello after 1s"), 1000);

````

1. What is the difference between `setTimeout` and `setInterval`?

// setTimeout ‚Üí runs once
// setInterval ‚Üí runs repeatedly

2. Predict:

```jsx
let count = 0;
let id = setInterval(() => {
  count++;
  console.log(count);
  if (count === 3) clearInterval(id);
}, 1000);
```

<!--
o/p =
1
2
3
 -->

1. What is destructuring? Example with array/object.
<!-- 
Destructuring is a feature that lets you unpack values from arrays or objects into variables in a simple, cleaner way.

ex-
let [x,y] = [1,2];
let {m,n} = {m:10,n:20};
console.log(x,y,m,n);
-->

2. Predict:

```jsx
let [a, b] = [1, 2];
let { x, y } = { x: 10, y: 20 };
console.log(a, b, x, y);
```

<!--
o/p=
1 2 10 20
 -->

---

## üîπ Objects & `this`

1. Predict:

```jsx
const obj = {
  name: "JS",
  greet: function () {
    console.log(this.name);
  },
};
obj.greet();
```

<!--
o/p=
JS
 -->

1. Predict:

```jsx
const obj = {
  name: "JS",
  arrow: () => console.log(this.name),
};
obj.arrow();
```

<!--
undefined
because In JavaScript, arrow functions don‚Äôt have their own this.
 -->

1. Explain shallow copy vs deep copy. Write code using spread operator for shallow copy.
<!--
Shallow ‚Üí copies reference
Deep ‚Üí full independent copy
 -->
2. Predict:

```jsx
let obj1 = { a: 1, b: 2 };
let obj2 = { ...obj1, c: 3 };
console.log(obj2);
```
<!-- 
The spread operator copies all enumerable properties of obj1 into obj2.
o/p = { a: 1, b: 2, c: 3 }
 -->

1. What is object destructuring? Show with an example.

---

## üîπ Promises & Async/Await

1. Predict:

```jsx
let p = new Promise((resolve) => resolve("Done!"));
p.then(console.log);
```

1. Write a function using `async/await` that waits 2 seconds and then prints `"Hello Async"`.

---

## üîπ Events & ES6 Features

1. What is the difference between `onclick="func()"` and `element.addEventListener("click", func)` in DOM?
2. Predict:

```jsx
let name = "Pratik";
console.log(`Hello, ${name}!`);
```

---

## üîπ Error Handling

1. Predict:

```jsx
try {
  throw new Error("Something went wrong!");
} catch (e) {
  console.log(e.message);
}
```

**~ Best Luck**
